import React, { useState, useEffect } from 'react';
import './AreaManagement.css';
import SweetAlert from './SweetAlert';

const AreaManagement = () => {
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  const [areas, setAreas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [selectedArea, setSelectedArea] = useState(null);
  const [formData, setFormData] = useState({
    area_name: '',
    user_id: 0
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  const [sweetAlert, setSweetAlert] = useState({
    isOpen: false,
    type: 'success',
    title: '',
    message: '',
    showConfirmButton: true,
    showCancelButton: false,
    onConfirm: null,
    onCancel: null
  });

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Sweet Alert
  const showSweetAlert = (type, title, message, options = {}) => {
    setSweetAlert({
      isOpen: true,
      type,
      title,
      message,
      showConfirmButton: options.showConfirmButton !== false,
      showCancelButton: options.showCancelButton || false,
      onConfirm: options.onConfirm || null,
      onCancel: options.onCancel || null,
      autoClose: options.autoClose !== false,
      autoCloseTime: options.autoCloseTime || 3000
    });
  };

  const closeSweetAlert = () => {
    setSweetAlert(prev => ({ ...prev, isOpen: false }));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å API
  const fetchAreas = async () => {
    try {
      setLoading(true);
      setError('');
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/admin_get_areas.php`);
      if (!response.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      const data = await response.json();
      if (data.success) {
        console.log('Areas data:', data.areas); // Debug log
        setAreas(data.areas || []);
      } else {
        setError(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (error) {
      console.error('Fetch error:', error);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAreas();
  }, []);

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const filteredAreas = areas.filter(area =>
    area.area_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pagination
  const totalPages = Math.ceil(filteredAreas.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentAreas = filteredAreas.slice(startIndex, endIndex);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1);
  };

  const handleAddArea = () => {
    setEditMode(false);
    setFormData({ area_name: '', user_id: 0 });
    setShowModal(true);
  };

  const handleEditArea = (area) => {
    setEditMode(true);
    setSelectedArea(area);
    setFormData({
      area_name: area.area_name,
      user_id: area.user_id || 0
    });
    setShowModal(true);
  };

  const handleDeleteArea = async (areaId) => {
    // ‡πÅ‡∏™‡∏î‡∏á Sweet Alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    showSweetAlert(
      'confirm',
      '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
      '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ',
      {
        showCancelButton: true,
        confirmText: '‡∏•‡∏ö',
        cancelText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        autoClose: false,
        onConfirm: async () => {
          try {
            const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/admin_delete_area.php?area_id=${areaId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              }
            });
            
            const data = await response.json();
            
            if (data.success) {
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å
              setAreas(areas.filter(area => area.area_id !== areaId));
              showSweetAlert(
                'success',
                '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                '‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
              );
            } else {
              showSweetAlert(
                'error',
                '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ'
              );
            }
          } catch (error) {
            console.error('Delete error:', error);
            showSweetAlert(
              'error',
              '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
              '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ'
            );
          }
        }
      }
    );
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      if (editMode) {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/admin_update_area.php`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            area_id: selectedArea.area_id,
            area_name: formData.area_name
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
          setAreas(areas.map(area =>
            area.area_id === selectedArea.area_id
              ? { ...area, area_name: formData.area_name }
              : area
          ));
          showSweetAlert(
            'success',
            '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
            '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
          );
        } else {
          showSweetAlert(
            'error',
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
            data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ'
          );
          return;
        }
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
        const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/admin_add_area.php`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            area_name: formData.area_name
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô state
          setAreas([...areas, data.area]);
          showSweetAlert(
            'success',
            '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
            '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
          );
        } else {
          showSweetAlert(
            'error',
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
            data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ'
          );
          return;
        }
      }
      
      // ‡∏õ‡∏¥‡∏î modal ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      setShowModal(false);
      setFormData({ area_name: '', user_id: 0 });
      
    } catch (error) {
      console.error('Submit error:', error);
      showSweetAlert(
        'error',
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ'
      );
    }
  };

  return (
    <div className="area-management">
      <div className="header">
        <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</h2>
        <div className="header-actions">
          <input
            type="text"
            className="search-input"
            placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà..."
            value={searchTerm}
            onChange={handleSearchChange}
          />
          <button className="btn-add" onClick={handleAddArea}>
            + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
          </button>
        </div>
      </div>

      {error && (
        <div className="alert alert-error">
          <span className="alert-icon">‚ö†Ô∏è</span>
          <span className="alert-message">{error}</span>
        </div>
      )}

      {loading ? (
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà...</p>
        </div>
      ) : (
        <div className="areas-table-wrapper">
          <table className="areas-table">
            <thead>
              <tr>
                <th style={{width: '60px'}}>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</th>
                <th style={{width: '140px'}}>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {currentAreas.map((area, idx) => (
                <tr key={area.area_id}>
                  <td>{startIndex + idx + 1}</td>
                  <td>{area.area_name}</td>
                  <td>
                    <div className="action-buttons">
                      <button 
                        className="btn-edit"
                        onClick={() => handleEditArea(area)}
                        title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button 
                        className="btn-delete"
                        onClick={() => handleDeleteArea(area.area_id)}
                        title="‡∏•‡∏ö"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
              {filteredAreas.length === 0 && !loading && (
                <tr>
                  <td colSpan="3">
                    <div className="empty-state">
                      <div className="empty-icon">üì≠</div>
                      <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</h3>
                      <p>
                        {searchTerm 
                          ? `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${searchTerm}"`
                          : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
                        }
                      </p>
                    </div>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}

      {/* Pagination */}
      {filteredAreas.length > 0 && (
        <div className="pagination-wrapper">
          <div className="pagination-info">
            ‡πÅ‡∏™‡∏î‡∏á {startIndex + 1}-{Math.min(endIndex, filteredAreas.length)} ‡∏à‡∏≤‡∏Å {filteredAreas.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </div>
          <div className="pagination">
            <button 
              className="page-btn prev"
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            >
              ‚Äπ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            </button>
            
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
              <button
                key={page}
                className={`page-btn ${currentPage === page ? 'active' : ''}`}
                onClick={() => handlePageChange(page)}
              >
                {page}
              </button>
            ))}
            
            <button 
              className="page-btn next"
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Ä∫
            </button>
          </div>
        </div>
      )}

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */}
      {showModal && (
        <div className="modal-overlay" onClick={() => setShowModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{editMode ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà'}</h3>
              <button className="close-btn" onClick={() => setShowModal(false)}>√ó</button>
            </div>
            <div className="modal-body">
              <form onSubmit={handleSubmit}>
                <div className="form-group">
                  <label htmlFor="area_name">‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà *</label>
                  <input
                    type="text"
                    id="area_name"
                    value={formData.area_name}
                    onChange={(e) => setFormData({...formData, area_name: e.target.value})}
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"
                    required
                  />
                </div>

                <div className="form-actions">
                  <button type="button" className="btn-cancel" onClick={() => setShowModal(false)}>
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                  <button type="submit" className="btn-submit">
                    {editMode ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Sweet Alert Component */}
      <SweetAlert
        isOpen={sweetAlert.isOpen}
        type={sweetAlert.type}
        title={sweetAlert.title}
        message={sweetAlert.message}
        showConfirmButton={sweetAlert.showConfirmButton}
        showCancelButton={sweetAlert.showCancelButton}
        confirmText={sweetAlert.type === 'confirm' ? '‡∏•‡∏ö' : '‡∏ï‡∏Å‡∏•‡∏á'}
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        onConfirm={sweetAlert.onConfirm}
        onCancel={sweetAlert.onCancel}
        onClose={closeSweetAlert}
        autoClose={sweetAlert.autoClose}
        autoCloseTime={sweetAlert.autoCloseTime}
      />
    </div>
  );
};

export default AreaManagement;
