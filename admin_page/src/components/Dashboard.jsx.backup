import React, { useState, useEffect } from 'react';
import './Dashboard.css';
import API_CONFIG from '../config/api.js';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  LineElement,
  PointElement,
} from 'chart.js';
import { Bar, Doughnut, Line } from 'react-chartjs-2';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  LineElement,
  PointElement
);

const Dashboard = () => {
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalItems: 0,
    expiredItems: 0,
    activeItems: 0,
    nearExpiryItems: 0,
    noExpiryItems: 0,
    totalCategories: 0,
    totalAreas: 0
  });
  
  const [itemStats, setItemStats] = useState(null);
  const [monthlyData, setMonthlyData] = useState([]);
  const [typeStats, setTypeStats] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // เธ”เธถเธเธเนเธญเธกเธนเธฅเธชเธ–เธดเธ•เธด item
  const fetchItemStats = async () => {
    try {
      console.log('Fetching item stats from:', API_CONFIG.ENDPOINTS.GET_ITEM_STATS);
      
      const response = await fetch(API_CONFIG.ENDPOINTS.GET_ITEM_STATS);
      
      // เธ•เธฃเธงเธเธชเธญเธเธงเนเธฒ response เน€เธเนเธ JSON เธซเธฃเธทเธญเนเธกเน
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const text = await response.text();
        console.error('Response is not JSON:', text);
        throw new Error('Server returned HTML instead of JSON. Check if PHP file exists and has no syntax errors.');
      }

      const data = await response.json();
      
      if (data.status === 'success') {
        const totalStats = data.data.total_stats;
        setItemStats(totalStats);
        setMonthlyData(data.data.monthly_data);
        setTypeStats(data.data.type_stats);
        
        // เธญเธฑเธเน€เธ”เธ•เธชเธ–เธดเธ•เธด
        setStats(prev => ({
          ...prev,
          totalUsers: parseInt(totalStats.total_users) || 0,
          totalItems: parseInt(totalStats.total_items) || 0,
          expiredItems: parseInt(totalStats.expired_count) || 0,
          activeItems: parseInt(totalStats.normal_count) || 0,
          nearExpiryItems: parseInt(totalStats.near_expiry_count) || 0,
          noExpiryItems: parseInt(totalStats.no_expiry_count) || 0,
          totalCategories: parseInt(totalStats.total_types) || 0
        }));
      } else {
        throw new Error(data.message || 'API returned error status');
      }
    } catch (error) {
      console.error('Error fetching item stats:', error);
      setError(`เน€เธเธดเธ”เธเนเธญเธเธดเธ”เธเธฅเธฒเธ”เนเธเธเธฒเธฃเธ”เธถเธเธเนเธญเธกเธนเธฅเธชเธ–เธดเธ•เธด: ${error.message}`);
    }
  };

  // เธ”เธถเธเธเนเธญเธกเธนเธฅเธเธนเนเนเธเน
  const fetchUserStats = async () => {
    try {
      const response = await fetch(API_CONFIG.ENDPOINTS.GET_USERS);
      const data = await response.json();
      
      if (data.status === 'success') {
        setStats(prev => ({
          ...prev,
          totalUsers: data.data.length
        }));
      }
    } catch (error) {
      console.error('Error fetching user stats:', error);
    }
  };

  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      await Promise.all([
        fetchItemStats(),
        fetchUserStats()
      ]);
      setLoading(false);
    };
    
    loadData();
  }, []);

  // เธเนเธญเธกเธนเธฅเธชเธณเธซเธฃเธฑเธ Doughnut Chart - เธชเธ–เธฒเธเธฐเธชเธดเธเธเนเธฒ
  const statusChartData = {
    labels: ['เนเธเนเธเธฒเธเนเธ”เน', 'เธซเธกเธ”เธญเธฒเธขเธธ', 'เนเธเธฅเนเธซเธกเธ”เธญเธฒเธขเธธ', 'เนเธกเนเธกเธตเธงเธฑเธเธซเธกเธ”เธญเธฒเธขเธธ'],
    datasets: [
      {
        data: [stats.activeItems, stats.expiredItems, stats.nearExpiryItems, stats.noExpiryItems],
        backgroundColor: [
          '#10B981', // เน€เธเธตเธขเธง - เนเธเนเธเธฒเธเนเธ”เน
          '#EF4444', // เนเธ”เธ - เธซเธกเธ”เธญเธฒเธขเธธ
          '#F59E0B', // เธชเนเธก - เนเธเธฅเนเธซเธกเธ”เธญเธฒเธขเธธ
          '#6366F1', // เธกเนเธงเธ - เนเธกเนเธกเธตเธงเธฑเธเธซเธกเธ”เธญเธฒเธขเธธ
        ],
        borderColor: [
          '#059669',
          '#DC2626',
          '#D97706',
          '#4F46E5',
        ],
        borderWidth: 2,
      },
    ],
  };

  const statusChartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'right',
        labels: {
          boxWidth: 20,
          padding: 15,
          font: {
            size: 12,
          },
        },
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            const total = context.dataset.data.reduce((a, b) => a + b, 0);
            const percentage = ((context.parsed * 100) / total).toFixed(1);
            return `${context.label}: ${context.parsed} (${percentage}%)`;
          }
        }
      }
    },
    maintainAspectRatio: false,
  };

  // เธเนเธญเธกเธนเธฅเธชเธณเธซเธฃเธฑเธ Bar Chart - เธเธฃเธฐเน€เธ เธ—เธชเธดเธเธเนเธฒ
  const typeChartData = {
    labels: typeStats.slice(0, 6).map(type => type.type_name),
    datasets: [
      {
        label: 'เธเธณเธเธงเธเธชเธดเธเธเนเธฒ',
        data: typeStats.slice(0, 6).map(type => type.item_count),
        backgroundColor: 'rgba(99, 102, 241, 0.8)',
        borderColor: 'rgba(99, 102, 241, 1)',
        borderWidth: 1,
        borderRadius: 8,
        borderSkipped: false,
      },
    ],
  };

  const typeChartOptions = {
    responsive: true,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleColor: 'white',
        bodyColor: 'white',
        borderColor: 'rgba(99, 102, 241, 1)',
        borderWidth: 1,
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        grid: {
          color: 'rgba(0, 0, 0, 0.1)',
        },
        ticks: {
          font: {
            size: 11,
          },
        },
      },
      x: {
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 11,
          },
          maxRotation: 45,
        },
      },
    },
    maintainAspectRatio: false,
  };

  // เธเนเธญเธกเธนเธฅเธชเธณเธซเธฃเธฑเธ Line Chart - เน€เธ—เธฃเธเธ”เนเธฃเธฒเธขเน€เธ”เธทเธญเธ
  const monthlyChartData = {
    labels: monthlyData.slice(0, 6).reverse().map(month => `${month.month_name.slice(0, 3)} ${month.year}`),
    datasets: [
      {
        label: 'เธเธณเธเธงเธเธชเธดเธเธเนเธฒเธ—เธตเนเน€เธเธดเนเธก',
        data: monthlyData.slice(0, 6).reverse().map(month => month.total_items),
        borderColor: 'rgba(16, 185, 129, 1)',
        backgroundColor: 'rgba(16, 185, 129, 0.1)',
        borderWidth: 3,
        fill: true,
        tension: 0.4,
        pointBackgroundColor: 'rgba(16, 185, 129, 1)',
        pointBorderColor: 'white',
        pointBorderWidth: 2,
        pointRadius: 6,
        pointHoverRadius: 8,
      },
      {
        label: 'เธเธณเธเธงเธเธเธนเนเนเธเนเธ—เธตเนเน€เธเธดเนเธก',
        data: monthlyData.slice(0, 6).reverse().map(month => month.total_users),
        borderColor: 'rgba(239, 68, 68, 1)',
        backgroundColor: 'rgba(239, 68, 68, 0.1)',
        borderWidth: 3,
        fill: true,
        tension: 0.4,
        pointBackgroundColor: 'rgba(239, 68, 68, 1)',
        pointBorderColor: 'white',
        pointBorderWidth: 2,
        pointRadius: 6,
        pointHoverRadius: 8,
      },
    ],
  };

  const monthlyChartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
        labels: {
          boxWidth: 20,
          padding: 15,
          font: {
            size: 12,
          },
        },
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleColor: 'white',
        bodyColor: 'white',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 1,
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        grid: {
          color: 'rgba(0, 0, 0, 0.1)',
        },
        ticks: {
          font: {
            size: 11,
          },
        },
      },
      x: {
        grid: {
          display: false,
        },
        ticks: {
          font: {
            size: 11,
          },
        },
      },
    },
    maintainAspectRatio: false,
  };

  return (
    <div className="dashboard">
      <h2>เนเธ”เธเธเธญเธฃเนเธ”</h2>
      
      {/* เนเธชเธ”เธ Error */}
      {error && (
        <div className="error-message">
          <span className="error-icon">โ ๏ธ</span>
          {error}
        </div>
      )}

      {/* เนเธชเธ”เธ Loading */}
      {loading && (
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>เธเธณเธฅเธฑเธเนเธซเธฅเธ”เธเนเธญเธกเธนเธฅ...</p>
        </div>
      )}
      
      {/* เธชเนเธงเธเธเนเธญเธกเธนเธฅเธเธนเนเนเธเน */}
      <div className="section">
        <div className="section-header">
          <h3>๐‘ฅ เธเนเธญเธกเธนเธฅเธเธนเนเนเธเนเธฃเธฐเธเธ</h3>
          <p>เธชเธ–เธดเธ•เธดเนเธฅเธฐเธเนเธญเธกเธนเธฅเธเธนเนเนเธเนเธเธฒเธเธ—เธฑเนเธเธซเธกเธ”</p>
        </div>
        <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon users">๐‘ฅ</div>
          <div className="stat-content">
            <h3>{stats.totalUsers}</h3>
            <p>เธเธนเนเนเธเนเธ—เธฑเนเธเธซเธกเธ”</p>
          </div>
        </div>
        </div>
      </div>

      {/* เธชเนเธงเธเธเนเธญเธกเธนเธฅเธชเธดเธเธเนเธฒ/เธชเธดเนเธเธเธญเธ */}
      <div className="section">
        <div className="section-header">
          <h3>๐“ฆ เธเนเธญเธกเธนเธฅเธชเธดเธเธเนเธฒเนเธฅเธฐเธชเธดเนเธเธเธญเธ</h3>
          <p>เธชเธ–เธดเธ•เธดเนเธฅเธฐเธชเธ–เธฒเธเธฐเธเธญเธเธชเธดเธเธเนเธฒเธ—เธฑเนเธเธซเธกเธ”เนเธเธฃเธฐเธเธ</p>
        </div>
        <div className="stats-grid">

        <div className="stat-card">
          <div className="stat-icon items">๐“ฆ</div>
          <div className="stat-content">
            <h3>{stats.totalItems}</h3>
            <p>เธชเธดเธเธเนเธฒเธ—เธฑเนเธเธซเธกเธ”</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon active">โ…</div>
          <div className="stat-content">
            <h3>{stats.activeItems}</h3>
            <p>เธชเธดเธเธเนเธฒเธ—เธตเนเนเธเนเธเธฒเธเนเธ”เน</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon expired">โ ๏ธ</div>
          <div className="stat-content">
            <h3>{stats.expiredItems}</h3>
            <p>เธชเธดเธเธเนเธฒเธซเธกเธ”เธญเธฒเธขเธธ</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon near-expiry">🔔</div>
          <div className="stat-content">
            <h3>{stats.nearExpiryItems}</h3>
            <p>เนเธเธฅเนเธซเธกเธ”เธญเธฒเธขเธธ</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon no-expiry">โ</div>
          <div className="stat-content">
            <h3>{stats.noExpiryItems}</h3>
            <p>เนเธกเนเธกเธตเธงเธฑเธเธซเธกเธ”เธญเธฒเธขเธธ</p>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon categories">๐“</div>
          <div className="stat-content">
            <h3>{stats.totalCategories}</h3>
            <p>เธซเธกเธงเธ”เธซเธกเธนเนเธ—เธฑเนเธเธซเธกเธ”</p>
          </div>
        </div>
        </div>
      </div>

      {/* เธชเนเธงเธเธเนเธญเธกเธนเธฅเธซเธกเธงเธ”เธซเธกเธนเน */}
      <div className="section">
        <div className="section-header">
          <h3>๐“ เธเนเธญเธกเธนเธฅเธซเธกเธงเธ”เธซเธกเธนเน</h3>
          <p>เธเธณเธเธงเธเธเธฃเธฐเน€เธ เธ—เธชเธดเธเธเนเธฒเธ—เธฑเนเธเธซเธกเธ”เนเธเธฃเธฐเธเธ</p>
        </div>
        <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon categories">๐“</div>
          <div className="stat-content">
            <h3>{stats.totalCategories}</h3>
            <p>เธซเธกเธงเธ”เธซเธกเธนเนเธ—เธฑเนเธเธซเธกเธ”</p>
          </div>
        </div>
        </div>
      </div>

      <div className="charts-section">
        <div className="chart-container">
          <h3>เธชเธ–เธฒเธเธฐเธชเธดเธเธเนเธฒ</h3>
          <div className="chart-wrapper">
            {!loading && stats.totalItems > 0 ? (
              <Doughnut data={statusChartData} options={statusChartOptions} />
            ) : (
              <div className="chart-placeholder">
                <p>เนเธกเนเธกเธตเธเนเธญเธกเธนเธฅเธชเธณเธซเธฃเธฑเธเนเธชเธ”เธเธเธฃเธฒเธ</p>
              </div>
            )}
          </div>
        </div>

        <div className="chart-container">
          <h3>เธเธฃเธฐเน€เธ เธ—เธชเธดเธเธเนเธฒเธขเธญเธ”เธเธดเธขเธก</h3>
          <div className="chart-wrapper">
            {!loading && typeStats.length > 0 ? (
              <Bar data={typeChartData} options={typeChartOptions} />
            ) : (
              <div className="chart-placeholder">
                <p>เนเธกเนเธกเธตเธเนเธญเธกเธนเธฅเธชเธณเธซเธฃเธฑเธเนเธชเธ”เธเธเธฃเธฒเธ</p>
              </div>
            )}
          </div>
        </div>

        <div className="chart-container full-width">
          <h3>เน€เธ—เธฃเธเธ”เนเธเธฒเธฃเน€เธเธดเนเธกเธชเธดเธเธเนเธฒเธฃเธฒเธขเน€เธ”เธทเธญเธ</h3>
          <div className="chart-wrapper">
            {!loading && monthlyData.length > 0 ? (
              <Line data={monthlyChartData} options={monthlyChartOptions} />
            ) : (
              <div className="chart-placeholder">
                <p>เนเธกเนเธกเธตเธเนเธญเธกเธนเธฅเธชเธณเธซเธฃเธฑเธเนเธชเธ”เธเธเธฃเธฒเธ</p>
              </div>
            )}
          </div>
        </div>

        <div className="stats-summary">
          <h3>เธชเธฃเธธเธเธชเธ–เธดเธ•เธดเน€เธเธดเนเธกเน€เธ•เธดเธก</h3>
          <div className="summary-grid">
            {typeStats.slice(0, 4).map((type, index) => (
              <div key={index} className="summary-item">
                <div className="summary-icon">๐“ฆ</div>
                <div className="summary-content">
                  <h4>{type.type_name}</h4>
                  <p>{type.item_count} เธฃเธฒเธขเธเธฒเธฃ</p>
                  <small>{type.user_count} เธเธนเนเนเธเน</small>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;


